I need you to implement the core mechanics for an RPG game targeting iOS and Android via React Native, using the development environment and UI/UX you set up in the RPGGame directory from the previous steps. This is a mobile game with a pixel art or cartoonish style, using SVGs from Figma for all visual assets, and it features turn-based gameplay with animations. Your task is to execute all necessary commands, create and update files, and integrate these mechanics directly on my Windows 10/11 machine, assuming you have full access to run commands like npm, expo, and file system operations via Cursor AI. Use the existing setup (React Native, Expo, Reanimated, React Navigation, RecyclerListView, etc.) and deliver a fully functional game with exploration, battles, and a storyline, without explanations—do not deviate from my specified requirements or add unsolicited features. Here’s exactly what to do:

Core Mechanics Requirements
Exploration Mechanics: Players encounter random enemies in different regions (forest, cave, city) on the Exploration Map screen, triggering battles.

Battle System: A turn-based system where players manage a team of up to 3 characters against enemies, selecting moves with animations.

Story and Quests: A linear storyline with 5 missions, unlocking sequentially, we will add more later.

Use Reanimated for all animations (e.g., enemy encounters, battle moves).

Store game data (characters, quests) in a local AsyncStorage database for simplicity, avoiding external servers for now.

Assume placeholder SVGs exist in assets/ (e.g., enemy1.svg, move1.svg) and integrate them as needed.

Setup Steps
Install Additional Dependencies:
Execute cd RPGGame to navigate into the project directory if not already there.

Execute npm install @react-native-async-storage/async-storage to add AsyncStorage for local data storage.

Verify installations by checking the updated package.json reflects this dependency.

Create Utility Functions:
Create utils/gameData.js to manage game state and data:
javascript

import AsyncStorage from '@react-native-async-storage/async-storage';

const initialCharacters = [
  { id: 1, name: 'Hero1', svg: 'assets/characters/hero1.svg', hp: 100, moves: [{ id: 'm1', name: 'Slash', damage: 20 }, { id: 'm2', name: 'Heal', heal: 15 }] },
  { id: 2, name: 'Hero2', svg: 'assets/characters/hero2.svg', hp: 80, moves: [{ id: 'm3', name: 'Fire', damage: 25 }, { id: 'm4', name: 'Shield', shield: 10 }] },
];
const enemies = [
  { id: 1, name: 'Goblin', svg: 'assets/characters/enemy1.svg', hp: 50, moves: [{ id: 'e1', name: 'Bite', damage: 15 }] },
  { id: 2, name: 'Troll', svg: 'assets/characters/enemy2.svg', hp: 70, moves: [{ id: 'e2', name: 'Smash', damage: 20 }] },
];
const quests = [
  { id: 1, title: 'Beginner’s Path', description: 'Defeat 1 enemy', reward: 'New Character', completed: false },
  { id: 2, title: 'Forest Trial', description: 'Defeat 2 enemies', reward: 'Health Boost', completed: false },
  { id: 3, title: 'Cave Challenge', description: 'Defeat 3 enemies', reward: 'New Move', completed: false },
  { id: 4, title: 'City Clash', description: 'Defeat 4 enemies', reward: 'Rare Item', completed: false },
  { id: 5, title: 'Final Stand', description: 'Defeat 5 enemies', reward: 'Victory', completed: false },
  { id: 6, title: 'Side: Lost Treasure', description: 'Explore Forest', reward: 'Bonus HP', completed: false, side: true },
  { id: 7, title: 'Side: Hidden Foe', description: 'Defeat Troll', reward: 'Extra Move', completed: false, side: true },
];

export const initializeGameData = async () => {
  await AsyncStorage.setItem('characters', JSON.stringify(initialCharacters));
  await AsyncStorage.setItem('enemies', JSON.stringify(enemies));
  await AsyncStorage.setItem('quests', JSON.stringify(quests));
  await AsyncStorage.setItem('playerTeam', JSON.stringify([initialCharacters[0]]));
};

export const getData = async (key) => JSON.parse(await AsyncStorage.getItem(key)) || [];
export const saveData = async (key, data) => await AsyncStorage.setItem(key, JSON.stringify(data));

Create utils/battleLogic.js for battle mechanics:
javascript

import { getData, saveData } from './gameData';

export const startBattle = async () => {
  const enemies = await getData('enemies');
  return enemies[Math.floor(Math.random() * enemies.length)];
};

export const applyMove = async (move, target, source) => {
  let updatedTarget = { ...target };
  if (move.damage) updatedTarget.hp = Math.max(0, target.hp - move.damage);
  if (move.heal) updatedTarget.hp = Math.min(100, target.hp + move.heal);
  if (move.shield) updatedTarget.hp += move.shield; // Simplified shield effect
  return updatedTarget;
};

export const enemyTurn = (enemy) => {
  const move = enemy.moves[Math.floor(Math.random() * enemy.moves.length)];
  return move;
};

Update Exploration Map Screen:
Overwrite screens/ExplorationMap.js to include encounter mechanics:
javascript

import React, { useEffect } from 'react';
import { StyleSheet, ScrollView, TouchableOpacity, Text, View } from 'react-native';
import SvgUri from 'react-native-svg';
import { useNavigation } from '@react-navigation/native';
import { initializeGameData } from '../utils/gameData';

export default function ExplorationMap() {
  const navigation = useNavigation();
  const regions = [
    { name: 'Forest', svg: 'assets/backgrounds/forest.svg' },
    { name: 'Cave', svg: 'assets/backgrounds/cave.svg' },
    { name: 'City', svg: 'assets/backgrounds/city.svg' },
  ];

  useEffect(() => {
    initializeGameData();
  }, []);

  const handleRegionPress = () => {
    if (Math.random() < 0.5) navigation.navigate('Battle');
  };

  return (
    <ScrollView style={styles.container}>
      {regions.map((region, index) => (
        <TouchableOpacity key={index} style={styles.region} onPress={handleRegionPress}>
          <SvgUri width="100%" height="150" uri={region.svg} />
          <Text style={styles.regionText}>{region.name}</Text>
        </TouchableOpacity>
      ))}
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1a1a1a',
  },
  region: {
    marginVertical: 10,
    alignItems: 'center',
  },
  regionText: {
    fontSize: 20,
    color: '#fff',
    fontFamily: 'monospace',
    marginTop: 5,
  },
});

Update Battle Screen:
Overwrite screens/BattleScreen.js with a functional battle system:
javascript

import React, { useState, useEffect } from 'react';
import { StyleSheet, View, Text, TouchableOpacity } from 'react-native';
import SvgUri from 'react-native-svg';
import Animated, { useSharedValue, useAnimatedStyle, withTiming } from 'react-native-reanimated';
import { startBattle, applyMove, enemyTurn, getData, saveData } from '../utils/battleLogic';

export default function BattleScreen() {
  const [team, setTeam] = useState([]);
  const [enemy, setEnemy] = useState(null);
  const moveX = useSharedValue(0);

  useEffect(() => {
    const initBattle = async () => {
      const playerTeam = await getData('playerTeam');
      setTeam(playerTeam);
      const newEnemy = await startBattle();
      setEnemy(newEnemy);
    };
    initBattle();
  }, []);

  const animatedMoveStyle = useAnimatedStyle(() => ({
    transform: [{ translateX: moveX.value }],
  }));

  const handleMove = async (move, character) => {
    moveX.value = withTiming(100, { duration: 500 }, () => { moveX.value = withTiming(0); });
    const updatedEnemy = await applyMove(move, enemy, character);
    setEnemy(updatedEnemy);

    if (updatedEnemy.hp > 0) {
      const enemyMove = enemyTurn(updatedEnemy);
      const updatedTeam = team.map(t => t === character ? await applyMove(enemyMove, t, updatedEnemy) : t);
      setTeam(updatedTeam);
      await saveData('playerTeam', updatedTeam);
    }
  };

  return (
    <View style={styles.container}>
      <View style={styles.teamContainer}>
        {team.map((member, index) => (
          <View key={index} style={styles.character}>
            <SvgUri width="80" height="80" uri={member.svg} />
            <Text style={styles.characterText}>{member.name} (HP: {member.hp})</Text>
          </View>
        ))}
      </View>
      {enemy && (
        <View style={styles.enemyContainer}>
          <SvgUri width="100" height="100" uri={enemy.svg} />
          <Text style={styles.characterText}>{enemy.name} (HP: {enemy.hp})</Text>
        </View>
      )}
      <View style={styles.movesContainer}>
        {team[0]?.moves.map((move, index) => (
          <Animated.View key={index} style={[styles.moveButton, animatedMoveStyle]}>
            <TouchableOpacity onPress={() => handleMove(move, team[0])}>
              <Text style={styles.moveText}>{move.name}</Text>
            </TouchableOpacity>
          </Animated.View>
        ))}
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1a1a1a',
    padding: 20,
  },
  teamContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  enemyContainer: {
    alignItems: 'center',
    marginVertical: 20,
  },
  character: {
    alignItems: 'center',
  },
  characterText: {
    fontSize: 16,
    color: '#fff',
    fontFamily: 'monospace',
  },
  movesContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  moveButton: {
    width: 100,
    height: 40,
    backgroundColor: '#4444ff',
    borderRadius: 5,
    justifyContent: 'center',
    alignItems: 'center',
  },
  moveText: {
    fontSize: 16,
    color: '#fff',
    fontFamily: 'monospace',
  },
});

Add Story and Quests Screen:
Create screens/QuestsScreen.js for story and quest management:
javascript

import React, { useState, useEffect } from 'react';
import { StyleSheet, View, Text, TouchableOpacity } from 'react-native';
import { getData, saveData } from '../utils/gameData';

export default function QuestsScreen() {
  const [quests, setQuests] = useState([]);

  useEffect(() => {
    const loadQuests = async () => {
      const questData = await getData('quests');
      setQuests(questData);
    };
    loadQuests();
  }, []);

  const completeQuest = async (questId) => {
    const updatedQuests = quests.map(q => q.id === questId ? { ...q, completed: true } : q);
    setQuests(updatedQuests);
    await saveData('quests', updatedQuests);
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Quests</Text>
      {quests.map((quest, index) => (
        <View key={index} style={styles.quest}>
          <Text style={styles.questText}>{quest.title}: {quest.description}</Text>
          <TouchableOpacity
            style={[styles.button, quest.completed && styles.completed]}
            onPress={() => !quest.completed && completeQuest(quest.id)}
          >
            <Text style={styles.buttonText}>{quest.completed ? 'Done' : 'Complete'}</Text>
          </TouchableOpacity>
        </View>
      ))}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1a1a1a',
    padding: 20,
  },
  title: {
    fontSize: 24,
    color: '#fff',
    fontFamily: 'monospace',
    marginBottom: 20,
  },
  quest: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginVertical: 10,
  },
  questText: {
    fontSize: 16,
    color: '#fff',
    fontFamily: 'monospace',
  },
  button: {
    width: 100,
    height: 40,
    backgroundColor: '#ff4444',
    borderRadius: 5,
    justifyContent: 'center',
    alignItems: 'center',
  },
  completed: {
    backgroundColor: '#444444',
  },
  buttonText: {
    fontSize: 16,
    color: '#fff',
    fontFamily: 'monospace',
  },
});

Update navigation/AppNavigator.js to include the Quests screen:
javascript

import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import MainMenu from '../screens/MainMenu';
import ExplorationMap from '../screens/ExplorationMap';
import BattleScreen from '../screens/BattleScreen';
import CollectionScreen from '../screens/CollectionScreen';
import QuestsScreen from '../screens/QuestsScreen';

const Stack = createStackNavigator();
const Tab = createBottomTabNavigator();

const GameTabNavigator = () => (
  <Tab.Navigator initialRouteName="Map" screenOptions={{ headerShown: false }}>
    <Tab.Screen name="Map" component={ExplorationMap} />
    <Tab.Screen name="Battle" component={BattleScreen} />
    <Tab.Screen name="Collection" component={CollectionScreen} />
    <Tab.Screen name="Quests" component={QuestsScreen} />
  </Tab.Navigator>
);

export default function AppNavigator() {
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="MainMenu" screenOptions={{ headerShown: false }}>
        <Stack.Screen name="MainMenu" component={MainMenu} />
        <Stack.Screen name="Game" component={GameTabNavigator} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

Execute and Verify the Core Functionality:
Execute npm install in the RPGGame directory to ensure all new dependencies (e.g., @react-native-async-storage/async-storage) are installed.

Execute expo start in the RPGGame directory to launch the Expo developer tools and verify the mechanics work.

Simulate gameplay by:
Navigating from Main Menu to the Exploration Map, triggering a battle randomly.

Engaging in a battle, selecting moves, and seeing HP updates with animations.

Accessing the Quests screen, completing a quest, and verifying the state change.

Save all generated and updated files in their respective directories (utils/, screens/, navigation/) as the foundation for subsequent development steps.

Output Requirements
Deliver the updated RPGGame project directory with all core mechanics implemented and verified:
New files: utils/gameData.js, utils/battleLogic.js, screens/QuestsScreen.js.

Updated files: screens/ExplorationMap.js, screens/BattleScreen.js, navigation/AppNavigator.js.

Update package.json to include the new dependency:
Add to dependencies: "@react-native-async-storage/async-storage": "latest".

Provide a confirmation message in the output: 'Core functionality complete: RPGGame mechanics are implemented and verified. Run expo start from the RPGGame directory to play the game.'

Ensure all commands have been executed, dependencies are installed, and the game is functional with expo start.