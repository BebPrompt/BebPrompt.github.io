I need you to design and implement the UI/UX for an RPG game targeting iOS and Android via React Native, using the development environment you set up in the RPGGame directory from the previous step. This is a mobile game with a pixel art or cartoonish style, using SVGs from Figma for all visual assets, and it will feature turn-based gameplay with animations. Your task is to execute all necessary commands, create files, and populate the project directory directly on my Windows 10/11 machine, assuming you have full access to run commands like npm, expo, and file system operations via Cursor AI. Use the existing setup (React Native, Expo, Reanimated, React Navigation, RecyclerListView, etc.) and deliver a fully functional UI/UX ready for gameplay development, without explanations—do not deviate from my specified requirements or add unsolicited features. Here’s exactly what to do:
UI/UX Requirements
Use React Native with Expo for all UI components, leveraging the pixel art or cartoonish style with SVGs.

Implement React Navigation (stack and bottom-tab navigators) for seamless screen transitions.

Use RecyclerListView for performant list rendering where applicable.

Apply Reanimated for basic animations (e.g., button presses, screen transitions).

Style all components with React Native’s StyleSheet in a pixel art aesthetic (e.g., sharp edges, bold colors), avoiding external CSS frameworks unless specified.

Assume placeholder SVGs exist in assets/ (e.g., button.svg, map.svg, character.svg) and integrate them as needed.

Setup Steps
Install Additional Dependencies:
Execute cd RPGGame to navigate into the project directory if not already there.

Execute npm install react-native-svg expo-asset to add support for SVG rendering and asset management in Expo.

Verify installations by checking the updated package.json reflects these dependencies.

Update Navigation Setup:
Overwrite navigation/AppNavigator.js with a combined stack and tab navigator:
javascript

import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import MainMenu from '../screens/MainMenu';
import ExplorationMap from '../screens/ExplorationMap';
import BattleScreen from '../screens/BattleScreen';
import CollectionScreen from '../screens/CollectionScreen';

const Stack = createStackNavigator();
const Tab = createBottomTabNavigator();

const GameTabNavigator = () => (
  <Tab.Navigator initialRouteName="Map" screenOptions={{ headerShown: false }}>
    <Tab.Screen name="Map" component={ExplorationMap} />
    <Tab.Screen name="Battle" component={BattleScreen} />
    <Tab.Screen name="Collection" component={CollectionScreen} />
  </Tab.Navigator>
);

export default function AppNavigator() {
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="MainMenu" screenOptions={{ headerShown: false }}>
        <Stack.Screen name="MainMenu" component={MainMenu} />
        <Stack.Screen name="Game" component={GameTabNavigator} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

Update App.js to use the new navigator:
javascript

import { GestureHandlerRootView } from 'react-native-gesture-handler';
import AppNavigator from './navigation/AppNavigator';

export default function App() {
  return (
    <GestureHandlerRootView style={{ flex: 1 }}>
      <AppNavigator />
    </GestureHandlerRootView>
  );
}

Create UI Screens:
Main Menu (screens/MainMenu.js):
Create a screen with buttons for 'Play', 'Settings', and 'Shop', using Reanimated for button press animations.

Write this exact content:
javascript

import React from 'react';
import { StyleSheet, View, TouchableOpacity, Text } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import Animated, { useSharedValue, useAnimatedStyle, withSpring } from 'react-native-reanimated';

export default function MainMenu() {
  const navigation = useNavigation();
  const scalePlay = useSharedValue(1);
  const scaleSettings = useSharedValue(1);
  const scaleShop = useSharedValue(1);

  const animatedPlayStyle = useAnimatedStyle(() => ({
    transform: [{ scale: scalePlay.value }],
  }));
  const animatedSettingsStyle = useAnimatedStyle(() => ({
    transform: [{ scale: scaleSettings.value }],
  }));
  const animatedShopStyle = useAnimatedStyle(() => ({
    transform: [{ scale: scaleShop.value }],
  }));

  const handlePressIn = (scale) => { scale.value = withSpring(0.95); };
  const handlePressOut = (scale) => { scale.value = withSpring(1); };

  return (
    <View style={styles.container}>
      <Animated.View style={[styles.button, animatedPlayStyle]}>
        <TouchableOpacity
          onPress={() => navigation.navigate('Game')}
          onPressIn={() => handlePressIn(scalePlay)}
          onPressOut={() => handlePressOut(scalePlay)}
        >
          <Text style={styles.buttonText}>Play</Text>
        </TouchableOpacity>
      </Animated.View>
      <Animated.View style={[styles.button, animatedSettingsStyle]}>
        <TouchableOpacity
          onPress={() => {}}
          onPressIn={() => handlePressIn(scaleSettings)}
          onPressOut={() => handlePressOut(scaleSettings)}
        >
          <Text style={styles.buttonText}>Settings</Text>
        </TouchableOpacity>
      </Animated.View>
      <Animated.View style={[styles.button, animatedShopStyle]}>
        <TouchableOpacity
          onPress={() => {}}
          onPressIn={() => handlePressIn(scaleShop)}
          onPressOut={() => handlePressOut(scaleShop)}
        >
          <Text style={styles.buttonText}>Shop</Text>
        </TouchableOpacity>
      </Animated.View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1a1a1a',
    alignItems: 'center',
    justifyContent: 'center',
  },
  button: {
    width: 200,
    height: 60,
    backgroundColor: '#ff4444',
    borderRadius: 8,
    marginVertical: 10,
    justifyContent: 'center',
    alignItems: 'center',
  },
  buttonText: {
    fontSize: 24,
    color: '#fff',
    fontFamily: 'monospace',
  },
});

Exploration Map (screens/ExplorationMap.js):
Create a scrollable map with 3-4 regions (e.g., forest, cave, city) as clickable areas.

Write this exact content:
javascript

import React from 'react';
import { StyleSheet, ScrollView, TouchableOpacity, Text, View } from 'react-native';
import SvgUri from 'react-native-svg';
import { useNavigation } from '@react-navigation/native';

export default function ExplorationMap() {
  const navigation = useNavigation();
  const regions = [
    { name: 'Forest', svg: 'assets/backgrounds/forest.svg' },
    { name: 'Cave', svg: 'assets/backgrounds/cave.svg' },
    { name: 'City', svg: 'assets/backgrounds/city.svg' },
  ];

  return (
    <ScrollView style={styles.container}>
      {regions.map((region, index) => (
        <TouchableOpacity
          key={index}
          style={styles.region}
          onPress={() => navigation.navigate('Battle')}
        >
          <SvgUri width="100%" height="150" uri={region.svg} />
          <Text style={styles.regionText}>{region.name}</Text>
        </TouchableOpacity>
      ))}
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1a1a1a',
  },
  region: {
    marginVertical: 10,
    alignItems: 'center',
  },
  regionText: {
    fontSize: 20,
    color: '#fff',
    fontFamily: 'monospace',
    marginTop: 5,
  },
});

Battle Screen (screens/BattleScreen.js):
Create a screen showing a player team (up to 3 slots) and enemies, with placeholder move buttons.

Write this exact content:
javascript

import React from 'react';
import { StyleSheet, View, Text, TouchableOpacity } from 'react-native';
import SvgUri from 'react-native-svg';

export default function BattleScreen() {
  const team = [
    { name: 'Player 1', svg: 'assets/characters/character1.svg' },
    { name: 'Player 2', svg: 'assets/characters/character2.svg' },
  ];
  const enemy = { name: 'Enemy', svg: 'assets/characters/enemy.svg' };

  return (
    <View style={styles.container}>
      <View style={styles.teamContainer}>
        {team.map((member, index) => (
          <View key={index} style={styles.character}>
            <SvgUri width="80" height="80" uri={member.svg} />
            <Text style={styles.characterText}>{member.name}</Text>
          </View>
        ))}
      </View>
      <View style={styles.enemyContainer}>
        <SvgUri width="100" height="100" uri={enemy.svg} />
        <Text style={styles.characterText}>{enemy.name}</Text>
      </View>
      <View style={styles.movesContainer}>
        <TouchableOpacity style={styles.moveButton}>
          <Text style={styles.moveText}>Move 1</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.moveButton}>
          <Text style={styles.moveText}>Move 2</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1a1a1a',
    padding: 20,
  },
  teamContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  enemyContainer: {
    alignItems: 'center',
    marginVertical: 20,
  },
  character: {
    alignItems: 'center',
  },
  characterText: {
    fontSize: 16,
    color: '#fff',
    fontFamily: 'monospace',
  },
  movesContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  moveButton: {
    width: 100,
    height: 40,
    backgroundColor: '#4444ff',
    borderRadius: 5,
    justifyContent: 'center',
    alignItems: 'center',
  },
  moveText: {
    fontSize: 16,
    color: '#fff',
    fontFamily: 'monospace',
  },
});

Collection Screen (screens/CollectionScreen.js):
Create a grid view of collected items using RecyclerListView, with placeholder details.

Write this exact content:
javascript

import React from 'react';
import { StyleSheet, View, Text } from 'react-native';
import { RecyclerListView, DataProvider, LayoutProvider } from 'recyclerlistview';
import SvgUri from 'react-native-svg';

const dataProvider = new DataProvider((r1, r2) => r1 !== r2);
const layoutProvider = new LayoutProvider(
  () => 0,
  (type, dim) => { dim.width = 100; dim.height = 120; }
);

export default function CollectionScreen() {
  const items = [
    { name: 'Item 1', svg: 'assets/characters/character1.svg' },
    { name: 'Item 2', svg: 'assets/characters/character2.svg' },
    { name: 'Item 3', svg: 'assets/characters/character3.svg' },
  ];

  const rowRenderer = (type, data) => (
    <View style={styles.item}>
      <SvgUri width="80" height="80" uri={data.svg} />
      <Text style={styles.itemText}>{data.name}</Text>
    </View>
  );

  return (
    <View style={styles.container}>
      <RecyclerListView
        style={styles.list}
        dataProvider={dataProvider.cloneWithRows(items)}
        layoutProvider={layoutProvider}
        rowRenderer={rowRenderer}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1a1a1a',
  },
  list: {
    flex: 1,
  },
  item: {
    alignItems: 'center',
    padding: 10,
  },
  itemText: {
    fontSize: 14,
    color: '#fff',
    fontFamily: 'monospace',
  },
});

Execute and Verify the UI/UX:
Execute npm install in the RPGGame directory to ensure all new dependencies (e.g., react-native-svg, expo-asset) are installed.

Execute expo start in the RPGGame directory to launch the Expo developer tools and verify the UI works.

Simulate navigation by ensuring the Main Menu screen loads, and clicking 'Play' transitions to the tab navigator with Map, Battle, and Collection screens accessible.

Save all generated files in their respective directories (screens/, navigation/) as the foundation for subsequent development steps.

Output Requirements
Deliver the updated RPGGame project directory with all UI/UX files executed and verified:
Updated files: App.js, navigation/AppNavigator.js.

New files: screens/MainMenu.js, screens/ExplorationMap.js, screens/BattleScreen.js, screens/CollectionScreen.js.

Update package.json to include new dependencies:
Add to dependencies: "react-native-svg": "latest", "expo-asset": "latest".

Provide a confirmation message in the output: 'UI/UX complete: RPGGame screens are implemented and verified. Run expo start from the RPGGame directory to view the interface.'

Ensure all commands have been executed, dependencies are installed, and the UI is functional with expo start.