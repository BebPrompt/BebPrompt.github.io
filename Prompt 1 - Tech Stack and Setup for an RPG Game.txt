I need you to fully set up a development environment for an RPG game targeting iOS and Android via React Native, designed to run smoothly on both platforms. This is a mobile game with a pixel art or cartoonish style, using SVGs from Figma for all visual assets, and it will feature turn-based gameplay with animations. Your task is to execute all installations, configurations, and verifications directly on my Windows 10/11 machine, assuming I’m starting fresh with no prior tools installed except Cursor AI as my code editor, and deliver a fully prepared project directory ready for development. You have the ability to run commands like winget, npm, and expo on my system—use this to perform all actions. Focus entirely on delivering finished code, files, and a completed setup without explanations—do not deviate from my specified tools or add unsolicited features.

Here’s exactly what to do:
Tech Stack Requirements
Use JavaScript as the primary programming language for all game logic and UI.

Use React Native (latest stable version) as the core framework for building cross-platform mobile apps.

Include Expo (latest stable version) for streamlined development, testing, and deployment, leveraging its CLI and over-the-air update capabilities.

Add React Native Reanimated (version 3.x.x or latest compatible with Expo) for smooth, native-driven animations critical to gameplay (e.g., character movements, transitions).

Include React Navigation (latest stable version) for managing screen transitions between game states (e.g., menu, game screen, settings).

Add RecyclerListView (latest version) for performant rendering of long lists (e.g., inventory or character lists).

Use @shopify
/react-native-skia (latest version) as a fallback for advanced 2D rendering if needed, ensuring compatibility with Expo.

Include ESLint (latest version) for code linting, with a configuration tailored to React Native and Expo projects.

Setup Steps
Install Core Tools on Windows:
Execute winget install OpenJS.NodeJS.LTS to install Node.js (latest LTS version, e.g., 20.x.x), which includes npm for package management.

Execute winget install Git.Git to install Git (latest version) for version control, ensuring git bash is available.

Execute npm install -g expo-cli to install the Expo CLI globally for project management.

Verify installations by running:
node -v (expecting a version like 20.x.x).

npm -v (expecting a version like 10.x.x).

git --version (expecting a version like git version 2.x.x).

expo --version (expecting a version like 6.x.x).

Initialize the Project:
Execute expo init RPGGame --template blank --npm to create a new Expo project named RPGGame, selecting the blank template and npm as the package manager when prompted (auto-accept all defaults).

Execute cd RPGGame to navigate into the project directory.

Execute npm install react-native-reanimated react-navigation-stack @react-navigation/native @react-navigation/bottom-tabs react-native-gesture-handler react-native-safe-area-context react-native-screens recyclerlistview @shopify/react-native-skia eslint eslint-config-expo to install all additional dependencies in one go.

Configure ESLint by executing npx eslint --init and programmatically selecting these options in sequence: 'To check syntax and find problems', 'JavaScript modules (import/export)', 'React', 'No TypeScript', 'Node environment', 'JSON format'.

Create Project Structure:
Execute the following commands to create the folder structure within the RPGGame directory:
mkdir assets components screens utils navigation

mkdir assets\characters assets\backgrounds assets\icons

Ensure the root directory includes standard Expo files like App.js, app.json, and package.json (automatically created by expo init).

Generate Configuration Files:
Create and write a package.json file in the RPGGame directory with this exact content populating the placeholders:
json

{
  "name": "RPGGame",
  "version": "1.0.0",
  "main": "node_modules/expo/AppEntry.js",
  "scripts": {
    "start": "expo start",
    "android": "expo start --android",
    "ios": "expo start --ios",
    "lint": "eslint ."
  },
  "dependencies": {
    "react-native": "latest",
    "expo": "latest",
    "react-native-reanimated": "^3.x.x",
    "@react-navigation/native": "latest",
    "@react-navigation/stack": "latest",
    "@react-navigation/bottom-tabs": "latest",
    "react-native-gesture-handler": "latest",
    "react-native-safe-area-context": "latest",
    "react-native-screens": "latest",
    "recyclerlistview": "latest",
    "@shopify/react-native-skia": "latest"
  },
  "devDependencies": {
    "eslint": "latest",
    "eslint-config-expo": "latest",
    "eslint-plugin-react": "latest"
  },
  "engines": {
    "node": ">=20.x.x"
  },
  "private": true
}

Create and write an .eslintrc.json file in the RPGGame directory with this exact content populating the placeholders:
json

{
  "env": {
    "browser": true,
    "es2021": true,
    "node": true
  },
  "extends": ["expo", "plugin:react/recommended"],
  "parserOptions": {
    "ecmaVersion": 12,
    "sourceType": "module"
  },
  "rules": {
    "react/prop-types": "off"
  }
}

Create and write a .gitignore file in the RPGGame directory with this exact content populating the placeholders:

node_modules/
*.log
.expo/
dist/

Create and write a .env file in the RPGGame directory with this exact content:

EXPO_PUBLIC_API_KEY=
EXPO_PUBLIC_ADMOB_ID=
EXPO_PUBLIC_IAP_ANDROID_KEY=
EXPO_PUBLIC_IAP_IOS_KEY=

Set Up Initial App Entry:
Overwrite the existing App.js file in the RPGGame directory with this exact content:
javascript

import { StatusBar } from 'expo-status-bar';
import { StyleSheet, View } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import { GestureHandlerRootView } from 'react-native-gesture-handler';

const Stack = createStackNavigator();

export default function App() {
  return (
    <GestureHandlerRootView style={{ flex: 1 }}>
      <NavigationContainer>
        <Stack.Navigator initialRouteName="MainMenu">
          <Stack.Screen name="MainMenu" component={() => <View style={styles.container}><StatusBar style="auto" /></View>} />
        </Stack.Navigator>
      </NavigationContainer>
    </GestureHandlerRootView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
});

Overwrite the existing babel.config.js file in the RPGGame directory with this exact content to enable Reanimated:
javascript

module.exports = function (api) {
  api.cache(true);
  return {
    presets: ['babel-preset-expo'],
    plugins: ['react-native-reanimated/plugin'],
  };
};

Execute and Verify the Setup:
Execute npm install in the RPGGame directory to install all dependencies specified in package.json.

Execute expo start in the RPGGame directory to launch the Expo developer tools, simulating the project startup.

Verify the setup by checking that the Expo developer tools open in my default browser and display the QR code for running the app on a mobile device or emulator.

Save all generated files (e.g., package.json, App.js, .eslintrc.json, .gitignore, .env, babel.config.js) in the RPGGame directory as the foundation for subsequent development steps.

Output Requirements
Deliver the fully prepared RPGGame project directory as a complete package, including:
All files: package.json, .eslintrc.json, .gitignore, .env, App.js, babel.config.js.

Folder structure: RPGGame/assets/characters/, RPGGame/assets/backgrounds/, RPGGame/assets/icons/, RPGGame/components/, RPGGame/screens/, RPGGame/utils/, RPGGame/navigation/.

Provide a confirmation message in the output: 'Setup complete: RPGGame project is ready. Run expo start from the RPGGame directory to begin development.'

Ensure all commands have been executed on my machine, dependencies are installed, and the project is verified to start successfully with expo start.

I give you full permission to make adjustments or changes if there are errors. In this event, let me know what you did.